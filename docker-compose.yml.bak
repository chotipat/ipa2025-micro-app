services:
  web:
    build: ./web
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    networks:
      - micro-app-net
    env_file: .env

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - micro-app-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10 
    env_file: .env

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"  
      - "5672:5672"    
    networks:
      - micro-app-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file: .env

  scheduler:
    build: ./scheduler
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - micro-app-net
    env_file: .env

  worker:
    build: 
      context: ./worker
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - micro-app-net
    env_file: .env

  api_service:
    build:
      context: ./api_service
    ports:
      - "8000:8000"
    depends_on:
      - mongo
    networks:
      - micro-app-net
    env_file: .env

  test:
    build:
      context: .
      dockerfile: test/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  mongo-data:

networks:
  micro-app-net:
