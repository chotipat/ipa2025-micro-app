from unittest.mock import patch, MagicMock
from worker.mongo_client import save_interface_data

@patch("worker.mongo_client.MongoClient")  # üëà mock MongoClient ‡πÉ‡∏ô module ‡∏ô‡∏µ‡πâ
def test_save_interface_data(mock_mongo):
    # Step 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° mock collection
    mock_collection = MagicMock()
    mock_db = {"interface_status": mock_collection}
    mock_mongo.return_value = {"ipa2025": mock_db}

    # Step 2: mock datetime.now(UTC)
    router_id = "r1"
    router_ip = "192.168.1.1"
    interfaces = [{"intf": "Gig0/0", "status": "up"}]

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ mock ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    save_interface_data(router_id, router_ip, interfaces)

    # Step 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ insert_one ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    assert mock_collection.insert_one.call_count == 1
    args, kwargs = mock_collection.insert_one.call_args
    inserted_data = args[0]

    assert inserted_data["router_id"] == router_id
    assert inserted_data["router_ip"] == router_ip
    assert inserted_data["interfaces"] == interfaces
    assert "created_at" in inserted_data
